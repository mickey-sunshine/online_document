# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import sys
import os
import shlex
import re
import yaml
# sys.path.insert(0, os.path.abspath('.'))

import sphinx_rtd_theme
#import sphinx_book_theme

# Uncomment for local build
#html_theme = "sphinx_rtd_theme"
#html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# For bibtex support
import sphinxcontrib.bibtex
# For embedded youtube
#import sphinxcontrib.youtube
# For converting SVG to PNG using rsvg
import sphinxcontrib.rsvgconverter

# -- Project information -----------------------------------------------------
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '../..'))
SOURCE_DIR = os.path.abspath(os.path.dirname(__file__))
BUILDDIR = os.path.join(SOURCE_DIR, 'build')
html_output_dir = os.path.join(BUILDDIR, 'html')
latex_output_dir = os.path.join(BUILDDIR, 'latex')
gettext_output_dir = os.path.join(BUILDDIR, 'gettext')



project = u'ArkAngel'
copyright = u'2025, RapidFlex'
author = u'RapidFlex'
manpage_url = u'https://rapid-flex.com'
# Logo for PDF build at front-page
latex_logo = 'appendix/rf_logo.jpeg' 

locale_dirs = ['locale/']
gettext_compact = False

# The short X.Y version
with open("VERSION.md") as ver_f:
  version = ver_f.readline().rstrip()
  # The full version, including alpha/beta/rc tags
  release = version

# Extract code comments from Makefiles and output to RST files
#des_rst_dirpath = "developer/api/makefiles/"
#regex_head = r"^(#((.|\n)*?))^[^#]"
#regex = r"^([a-zA-Z-_]*):.*$$\n((.|\n)*?)(\t|^$$)"
#for root, dirs, files in os.walk("../../"):
#  for file in files:
#    if file == "Makefile":
#      makefile_abspath = os.path.abspath(os.path.join(root, file))
#      # Find relative path
#      des_rst_relpath = des_rst_dirpath + os.path.relpath(makefile_abspath, os.path.abspath("../../"))
#      os.makedirs(des_rst_relpath, exist_ok=True)
#      des_rst_filepath = os.path.dirname(des_rst_relpath) + "/_Makefile.rst"
#      with open(makefile_abspath, 'r') as f:
#        with open(des_rst_filepath, 'w') as fw:
#          content = f.read()
#          matches = re.search(regex_head, content, re.MULTILINE)
#          if matches:
#            fw.write(re.sub(r'\n#[ ]?', '\n', matches[1])[2:])
#          else:
#            dummy_title = file.replace("..","")
#            fw.write(f"{dummy_title}\n{'='*len(dummy_title)}\n\n")
#          fw.write("\n\n")
#          matches = re.finditer(regex, content, re.MULTILINE)
#          for matchNum, match in enumerate(matches, start=1):
#            header, content = match[1], match[2]
#            rst = f"{header}\n{'-'*len(header)}\n"
#            rst += f"{content.replace('# ', '')}\n"
#            fw.write(rst)

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.todo',
    'sphinx.ext.mathjax',
    'sphinx.ext.graphviz',
    'sphinxcontrib.bibtex',
    'sphinx.ext.autosectionlabel',
    'sphinxcontrib.rsvgconverter',
    'm2r2',
]

# Add any paths that contain templates here, relative to this directory.
#templates_path = ['ytemplates']
#templates_path = [sphinx_rtd_theme.get_html_theme_path()]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# Number figures for referencing
numfig = True

# Bibtex file
bibtex_bibfiles =['appendix/z_reference.bib']

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
#html_theme = 'alabaster'
html_theme = 'sphinx_rtd_theme'
#html_theme = 'bizstyle'
#html_theme = 'sphinx_book_theme'
#html_theme = 'furo'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# Comment when using local build
# Uncomment when using readthedocs build
#html_theme_options = { }

# Adding custom CSS stylesheet
html_css_files = [
  'custom.css',
]


# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

# Add custom page width
def setup(app):
  app.add_css_file("_static/style.css")


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'ArkAngeldoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'arkangel.tex', u'ArkAngel Documentation',
     u'RapidFlex', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'arkangel', u'ArkAngel Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'arkangel', u'ArkAngel Documentation',
     author, 'RapidFlex', 'RapidFlex Software',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']
